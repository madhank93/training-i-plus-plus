// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	domain "product/domain"
	errs "product/utils/errs"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepositoryDB is an autogenerated mock type for the ProductRepositoryDB type
type ProductRepositoryDB struct {
	mock.Mock
}

// DeleteProductById provides a mock function with given fields: _a0
func (_m *ProductRepositoryDB) DeleteProductById(_a0 string) *errs.AppError {
	ret := _m.Called(_a0)

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func(string) *errs.AppError); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}

// FetchProductById provides a mock function with given fields: _a0
func (_m *ProductRepositoryDB) FetchProductById(_a0 string) (*domain.Product, *errs.AppError) {
	ret := _m.Called(_a0)

	var r0 *domain.Product
	if rf, ok := ret.Get(0).(func(string) *domain.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(string) *errs.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *ProductRepositoryDB) Save(_a0 domain.Product) (*domain.Product, *errs.AppError) {
	ret := _m.Called(_a0)

	var r0 *domain.Product
	if rf, ok := ret.Get(0).(func(domain.Product) *domain.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(domain.Product) *errs.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: _a0, _a1
func (_m *ProductRepositoryDB) UpdateProduct(_a0 string, _a1 domain.Product) (*domain.Product, *errs.AppError) {
	ret := _m.Called(_a0, _a1)

	var r0 *domain.Product
	if rf, ok := ret.Get(0).(func(string, domain.Product) *domain.Product); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(string, domain.Product) *errs.AppError); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}
