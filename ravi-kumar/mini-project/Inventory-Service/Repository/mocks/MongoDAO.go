// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	mockdata "Inventory-Service/model"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MongoDAO is an autogenerated mock type for the MongoDAO type
type MongoDAO struct {
	mock.Mock
}

// MongoCreateProduct provides a mock function with given fields: newProduct
func (_m *MongoDAO) MongoCreateProduct(newProduct mockdata.Product) string {
	ret := _m.Called(newProduct)

	var r0 string
	if rf, ok := ret.Get(0).(func(mockdata.Product) string); ok {
		r0 = rf(newProduct)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MongoDeleteProductById provides a mock function with given fields: productId
func (_m *MongoDAO) MongoDeleteProductById(productId primitive.ObjectID) (*string, error) {
	ret := _m.Called(productId)

	var r0 *string
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *string); ok {
		r0 = rf(productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MongoGetCatalog provides a mock function with given fields:
func (_m *MongoDAO) MongoGetCatalog() []mockdata.Product {
	ret := _m.Called()

	var r0 []mockdata.Product
	if rf, ok := ret.Get(0).(func() []mockdata.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mockdata.Product)
		}
	}

	return r0
}

// MongoGetProductById provides a mock function with given fields: productId
func (_m *MongoDAO) MongoGetProductById(productId primitive.ObjectID) (*mockdata.Product, error) {
	ret := _m.Called(productId)

	var r0 *mockdata.Product
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *mockdata.Product); ok {
		r0 = rf(productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mockdata.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MongoUpdateProductById provides a mock function with given fields: productId, updatedProduct
func (_m *MongoDAO) MongoUpdateProductById(productId primitive.ObjectID, updatedProduct mockdata.Product) (*mockdata.Product, error) {
	ret := _m.Called(productId, updatedProduct)

	var r0 *mockdata.Product
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, mockdata.Product) *mockdata.Product); ok {
		r0 = rf(productId, updatedProduct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mockdata.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID, mockdata.Product) error); ok {
		r1 = rf(productId, updatedProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
