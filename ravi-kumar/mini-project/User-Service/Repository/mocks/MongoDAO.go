// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	mockdata "User-Service/model"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MongoDAO is an autogenerated mock type for the MongoDAO type
type MongoDAO struct {
	mock.Mock
}

// MongoCreateUser provides a mock function with given fields: newUser
func (_m *MongoDAO) MongoCreateUser(newUser mockdata.User) string {
	ret := _m.Called(newUser)

	var r0 string
	if rf, ok := ret.Get(0).(func(mockdata.User) string); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MongoDeleteUserById provides a mock function with given fields: userId
func (_m *MongoDAO) MongoDeleteUserById(userId primitive.ObjectID) (*string, error) {
	ret := _m.Called(userId)

	var r0 *string
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *string); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MongoGetAllUsers provides a mock function with given fields:
func (_m *MongoDAO) MongoGetAllUsers() []mockdata.User {
	ret := _m.Called()

	var r0 []mockdata.User
	if rf, ok := ret.Get(0).(func() []mockdata.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mockdata.User)
		}
	}

	return r0
}

// MongoGetUserById provides a mock function with given fields: userId
func (_m *MongoDAO) MongoGetUserById(userId primitive.ObjectID) (*mockdata.User, error) {
	ret := _m.Called(userId)

	var r0 *mockdata.User
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *mockdata.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mockdata.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MongoUpdateUserById provides a mock function with given fields: userId, updatedUser
func (_m *MongoDAO) MongoUpdateUserById(userId primitive.ObjectID, updatedUser mockdata.User) (*mockdata.User, error) {
	ret := _m.Called(userId, updatedUser)

	var r0 *mockdata.User
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, mockdata.User) *mockdata.User); ok {
		r0 = rf(userId, updatedUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mockdata.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID, mockdata.User) error); ok {
		r1 = rf(userId, updatedUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MongoUserLogin provides a mock function with given fields: logInDTO
func (_m *MongoDAO) MongoUserLogin(logInDTO mockdata.LogInDTO) (mockdata.User, error) {
	ret := _m.Called(logInDTO)

	var r0 mockdata.User
	if rf, ok := ret.Get(0).(func(mockdata.LogInDTO) mockdata.User); ok {
		r0 = rf(logInDTO)
	} else {
		r0 = ret.Get(0).(mockdata.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(mockdata.LogInDTO) error); ok {
		r1 = rf(logInDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
