// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sachinsom93/shopping-cart/services/user (interfaces: UserServices)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sachinsom93/shopping-cart/models"
)

// MockUserServices is a mock of UserServices interface.
type MockUserServices struct {
	ctrl     *gomock.Controller
	recorder *MockUserServicesMockRecorder
}

// MockUserServicesMockRecorder is the mock recorder for MockUserServices.
type MockUserServicesMockRecorder struct {
	mock *MockUserServices
}

// NewMockUserServices creates a new mock instance.
func NewMockUserServices(ctrl *gomock.Controller) *MockUserServices {
	mock := &MockUserServices{ctrl: ctrl}
	mock.recorder = &MockUserServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServices) EXPECT() *MockUserServicesMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserServices) CreateUser(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServicesMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServices)(nil).CreateUser), arg0)
}

// DeleteUser mocks base method.
func (m *MockUserServices) DeleteUser(arg0 *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServicesMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserServices)(nil).DeleteUser), arg0)
}

// GetAllUser mocks base method.
func (m *MockUserServices) GetAllUser() ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUser")
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUser indicates an expected call of GetAllUser.
func (mr *MockUserServicesMockRecorder) GetAllUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUser", reflect.TypeOf((*MockUserServices)(nil).GetAllUser))
}

// GetUser mocks base method.
func (m *MockUserServices) GetUser(arg0 *string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServicesMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServices)(nil).GetUser), arg0)
}

// UpdateUser mocks base method.
func (m *MockUserServices) UpdateUser(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServicesMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServices)(nil).UpdateUser), arg0)
}
