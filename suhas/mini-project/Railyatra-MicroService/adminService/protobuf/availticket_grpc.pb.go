// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AvailTicketServiceClient is the client API for AvailTicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AvailTicketServiceClient interface {
	GetTicketConfirmation(ctx context.Context, in *AvailTicketRequest, opts ...grpc.CallOption) (*AvailTicketResponse, error)
}

type availTicketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAvailTicketServiceClient(cc grpc.ClientConnInterface) AvailTicketServiceClient {
	return &availTicketServiceClient{cc}
}

func (c *availTicketServiceClient) GetTicketConfirmation(ctx context.Context, in *AvailTicketRequest, opts ...grpc.CallOption) (*AvailTicketResponse, error) {
	out := new(AvailTicketResponse)
	err := c.cc.Invoke(ctx, "/protobuf.AvailTicketService/GetTicketConfirmation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AvailTicketServiceServer is the server API for AvailTicketService service.
// All implementations must embed UnimplementedAvailTicketServiceServer
// for forward compatibility
type AvailTicketServiceServer interface {
	GetTicketConfirmation(context.Context, *AvailTicketRequest) (*AvailTicketResponse, error)
	mustEmbedUnimplementedAvailTicketServiceServer()
}

// UnimplementedAvailTicketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAvailTicketServiceServer struct {
}

func (UnimplementedAvailTicketServiceServer) GetTicketConfirmation(context.Context, *AvailTicketRequest) (*AvailTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketConfirmation not implemented")
}
func (UnimplementedAvailTicketServiceServer) mustEmbedUnimplementedAvailTicketServiceServer() {}

// UnsafeAvailTicketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvailTicketServiceServer will
// result in compilation errors.
type UnsafeAvailTicketServiceServer interface {
	mustEmbedUnimplementedAvailTicketServiceServer()
}

func RegisterAvailTicketServiceServer(s grpc.ServiceRegistrar, srv AvailTicketServiceServer) {
	s.RegisterService(&AvailTicketService_ServiceDesc, srv)
}

func _AvailTicketService_GetTicketConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvailTicketServiceServer).GetTicketConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AvailTicketService/GetTicketConfirmation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvailTicketServiceServer).GetTicketConfirmation(ctx, req.(*AvailTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AvailTicketService_ServiceDesc is the grpc.ServiceDesc for AvailTicketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AvailTicketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.AvailTicketService",
	HandlerType: (*AvailTicketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTicketConfirmation",
			Handler:    _AvailTicketService_GetTicketConfirmation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/availticket.proto",
}
