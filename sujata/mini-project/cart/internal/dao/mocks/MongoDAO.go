// Code generated by mockery v2.10.1. DO NOT EDIT.

package mocks

import (
	errors "cart/internal/errors"
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "cart/internal/dao/models"
)

// MongoDAO is an autogenerated mock type for the MongoDAO type
type MongoDAO struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: ctx, cartProduct, email
func (_m *MongoDAO) AddProduct(ctx context.Context, cartProduct model.CartProduct, email string) *errors.ServerError {
	ret := _m.Called(ctx, cartProduct, email)

	var r0 *errors.ServerError
	if rf, ok := ret.Get(0).(func(context.Context, model.CartProduct, string) *errors.ServerError); ok {
		r0 = rf(ctx, cartProduct, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.ServerError)
		}
	}

	return r0
}

// DeleteCart provides a mock function with given fields: ctx, email
func (_m *MongoDAO) DeleteCart(ctx context.Context, email string) *errors.ServerError {
	ret := _m.Called(ctx, email)

	var r0 *errors.ServerError
	if rf, ok := ret.Get(0).(func(context.Context, string) *errors.ServerError); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.ServerError)
		}
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: ctx, productId, email
func (_m *MongoDAO) DeleteProduct(ctx context.Context, productId string, email string) *errors.ServerError {
	ret := _m.Called(ctx, productId, email)

	var r0 *errors.ServerError
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *errors.ServerError); ok {
		r0 = rf(ctx, productId, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.ServerError)
		}
	}

	return r0
}

// GetCart provides a mock function with given fields: ctx, email
func (_m *MongoDAO) GetCart(ctx context.Context, email string) (model.Cart, *errors.ServerError) {
	ret := _m.Called(ctx, email)

	var r0 model.Cart
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Cart); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(model.Cart)
	}

	var r1 *errors.ServerError
	if rf, ok := ret.Get(1).(func(context.Context, string) *errors.ServerError); ok {
		r1 = rf(ctx, email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.ServerError)
		}
	}

	return r0, r1
}

// UpdateProductQuantity provides a mock function with given fields: ctx
func (_m *MongoDAO) UpdateProductQuantity(ctx context.Context) *errors.ServerError {
	ret := _m.Called(ctx)

	var r0 *errors.ServerError
	if rf, ok := ret.Get(0).(func(context.Context) *errors.ServerError); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.ServerError)
		}
	}

	return r0
}
